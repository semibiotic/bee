$RuOBSD: BILLING,v 1.11 2005/08/01 00:10:59 shadow Exp $
Last Update 1.08.2005

                        БИЛЛИНГ, ОПИСАНИЕ  
                          текущая версия
               (Этот документ не является User Manual)

                       Минимальные требования

   Пакет разработан для OpenBSD, хотя в теории, модель билинга разрабатывалась
 универсальной - ядро билинга не выполняет ничего специфичного для OpenBSD,
 все это вынесено в скрипты и утилиты. Ядро может быть легко портировано под
 другие ОС. Другие компоненты могут быть портированы, переписаны или
 переразработаны.

   Весь пакет должен работать под 3.5 и выше, мы решаем проблемы возникающие
 в новых релизах OpenBSD (в данный момент - 3.7).
   До 3.5 не будут работать скрипты с командой pkill.
   До 3.3 в PF отсутствует поддержка таблиц, придется корректировать дефолты,
 хотя образцы скриптов для генерации правил из программы не удалялись.
   До 3.2 у pfctl(8) были другие ключи
   До 3.0 у OpenBSD был другой файрвол - IPF, из проекта удалена его поддержка
 (удален beetraff cоответствующей версии и скриптовая поддержка), но их можно
 найти на CVS (правда работать оно будет крайне медленно).
   До 2.7 работа не тестировалась, т.к. проекта не существовало.

   Проект создан на платформе i386 (32-bit, little-endian), на других не
 тестировался.
    >> Для перехода на 64-битные платформы точно требуется доводка кода.
    >> На big-endian платформах проблем не должно быть но они возможны.

   Минимальные требования к процессору/памяти/диску не промерялись. Скорее
 всего, подойдет любая разумная конфигурация - процессор начиная с i486, если
 памяти мало (16 Mбайт и меньше), то, для подстраховки лучше иметь swap на
 диске.

                      Цели.

   Билинг представляет собой комплекс программ и скриптов для:
   * Ведения счетов пользователей
   * подсчета расхода произвольных ресурсов
   * удержания соответствующих сумм со счетов
   * учет расхода ресурсов и операций над счетом (в журнале транзакций) 
   * и управления доступом к этим ресурсам в зависимости от
     состояния счета
   * генерации отчетов по транзакциям
   * поддержки веб-интерфейса для посмотра состояния счета,
     статистики управление счетом
   
   Модули

   >> Ядро билинга (/usr/local/bin/bee) - tcp-сервер, в течении сеанса
     принимающий команды от клиента (программы или оператора через telnet).
     Каждая сессия обрабатывается отдельным независимым процессом, с
     с обеспечением совмесной работы на уровне библиотеки доступа к данным.
     В том числе (параллельно с сервером или без него) ядро билинга может быть
     запущено в консольном режиме обеспечивая на консоли тот же интерфейс
     что и для сетевого клиента (не требует запушенного сервера).
     Количество одновременных клиентских и консольных сессий не ограничено.

     До запуска (или вместо него) сервера/консоли ядро может выполнить
     процедуру обновления разрешений доступа к ресурсам (см. ниже), если указан
     ключ -u.

     По командам ядро:

     1. Предоставляет текущую информацию о состоянии, конфигурации и статистике
        в (в виде адаптированном для программы и/или человека) т.ч.:
          * текущее состояние счета
          * произвольные lookup-ы ресурсов по счету и наоборот
          * журнал транзакций,
          * отчеты за указанный период
     2. Проводит начисления на счета
     3. Рассчитывает и удерживает суммы за расход ресурса
     4. Протоколирует транзакции (начисления и удержания)
     5. Обеспечивает управление счетами
     6. Позволяет редактировать текущую конфигурацию - параметры счета,
        разрешаемые через него ресурсы и т.п.
     7. Через внешние скрипты управляет доступом клиентов к ресурсам,
        в зависимости от состояния счета. 
          По специальной команде ('update') ядро суммирует данные в
        виде таблиц, на разрешение доступа, и вызывает скрипты, в
        задачу которых входит сгенерировать правила требуемого вида
        (с помощью входящих в пакет утилит), последний из скриптов должен
        загрузить полученные правила в программу, которая непосредственно
        управляет доступом (файрвол, прокси-сервер итп).
     8. Также могут существовать несколько кустарных команд для управления
        через программу несвязанными с ней ресурсами (с целью автоматизации
        каких либо процессов).

   >> Программы работающие непосредственно с файлами данных билинга (через
      ту же библиотеку с разделением доступа, через которую работает bee),
      Это генератор отчета по транзакциям, программы снимающие какие-нибудь
      данные. Эти программы не должны изменять данные (все изменения проходят
      через команды ядра, модулями следующего типа), прямой доступ
      используется для ускорения их работы. Минус таких программ - они могут
      работать только на одном компьютере с билингом.

   >> Клиенты билинга - программы открывающие соединение с ядром
     билинга (по сети, поэтому, могут выполнятся на другом хосте).
       * Модули счетчиков. Их задача 
           >> собрать данные о расходе ресурса, или снять со
              специализированной утилиты/функции ядра системы
           >> Специальной командой передать сведения о расходе
              ресурса и необходимой идентификационной информации
              ядру билинга, котогое высчитает и удержит
              причитающиеся суммы с нужных счетов.
           >> Периодически давать команду на обновление правил
              управления доступом, находя грань между realtime-ом
              и здравым смыслом.
         Счетчики могут принимать различную форму - работать постоянно
         в виде демона или запускаться периодически используя системные
         средства (например демон cron(8)).
         Представлять собой один модуль или комплекс из несколько утилит
         и скриптов.
           Например стандартный для данного пакета счетчик трафика представляет
         собой:
           >> перенаправление внешнего трафика на интерфейс pflog0 средствами
              встроенного файрвола PF
           >> коллектор трафика (демон), снимающий и собирающий статистику
              по трафику на pflog0. Стандартные средсва поддерживают работу
              с двумя коллкекторами трафика - cnupm (предпочтительней) и
              ipstatd.
           >> скрипт, запускаемый через cron(8) используя утилиту коллектора
              снимает статистику в виде текстового файла и передает программе
              beetraff. При последнем вызове, beetraff запускается с ключом
              для передачи билингу команды update.
           >> beetraff парсит файл, соединяется с ядром билинга и передает
              данные о расходе трафика билингу. При запуске со специальным
              ключом, перед отсоединением beetraff дает билингу команду update.
       * Различнные утилиты, предназначенные для зачисления денег (например
         АРМ кассира - payman).
       * Утилиты получения информации и управления счетом с веб-интерфейса.

   >> Утилиты и скрипты вызываемые билингом для :
       * генерации правил для конкретного ресурса
       * загрузки новых правила в программы, непосредственно управляющие
         доступом (файрвол, прокси-сервер итп)
         (/usr/local/bin/beeapply.sh)   

   >> Дополнительные утилиты
       * logidx  - генератор индексного файла для журнала транзакций
       * ipchk   - проверить IP адрес в файле доступа

   Ограничения в данной точке разработки:

   * отсутствие аутентификации и уровней доступа
   * описание ресурса статически прописываются в исходном коде
     ядра билинга
   * тарифы и алгоритмы расчета сумм для каждого ресурса
     статически прописываются в исходном коде ядра билинга
   * критерий активности счета жестко прописан в программе -
        * целостность записи
        * отсутствие инвалидизирующих тегов (DELETED, BROKEN)
        * отсутствие приостанавливающих тегов (FROZEN, OFF)
        * наличие тега UNLIMIT или положительный балланс счета
   * нет (и не будет) модулей для подсчета почтового трафика
    
Базовые понятия: СЧЕТ (или АККАУНТ)

   Счет (в базе счетов account2.dat) представлен записью с полями:
    * номером (индекс в таблице счетов)
    * словом флагов (tag) (в порядке убывания приоритета)
       * DELETED (также EMPTY) - счет был удален
       * BROKEN - поврежденный счет
       * FROZEN - счет заморожен (доступ запрещен администратором)
       * OFF    - cчет выключен (доступ приостановлен самим пользователем)
       * UNLIMIT - нелимитированый доступ (доступ разрешен, но списания
         не производятся)
       * PAYMAN - разрешить управление счетом через утилиту payman
         (utils/payman) 
    * балансом (суммой на счету)
    * начало периода действия (дата)
    * конец периода действия (дата, не включая !)
   Данные о владельце счета не хранятся в таблице счетов.

     Балланс и период действия - исключающие друг друга режимы
   определения активности счета.
     Режим периода активен если выставлено либо начало, либо
   конец периода. Если же и начало и конец периода в NULL
   - работает балланс.
     При теге UNLIMIT аккаунт активен всегда.

   ACTIVE =
                       (unlimit)
                           ||
   (start == NULL && stop == NULL) && (ballance >= 0.01)
                           ||
   (start != NULL || stop != NULL) && (date > start) && (date < stop || stop == NULL)

     Теги DELETED и BROKEN указывают на недостоверность
   аккаунтной записи в таблице и запрещают любые действия над
   аккаунтом (кроме его восстановления). У тега DELETED 
   приоритет выше.

   RELIABLE = (! broken) && (! deleted)

     Доступ запрещается при наличии тегов FROZEN или OFF. А
   также при недостоверности или неактивности аккаунта.

   ACCESS =
     RELIABLE && (! frozen) && (! off) && ACTIVE 
          
     Транзакции запрещаются (но пишутся в журнал с кодом ошибки)
   при тегах UNLIMIT и FROZEN. Как и другие операции, транзакции
   запрещены при недостоверности аккаунта

   TRANS_ENABLE = 
     RELIABLE && (! unlimit) && (! frozen)

Базовые понятия: РЕСУРС

   Ресурс - любая услуга подлежащая тарификации (или безденежному
   учету) и/или управлению через билинг. Ресурс (в статических
   таблицах ядра билинга) представлен:
   * числовым id-ом ресурса (индекс таблицы)
   * строкой-идентом ресурса (напр. "inet", "mail" и т.п.)
   * процедурой, подстчета приращения баланса исходя из предоставленных
     модулем подсчета данных (возможно и из других доступных данных)
   * командной строкой для вызова генератора правил (непосредственно или через скрипт)
     (см. Управление доступом)
   * тип строкового идента гейта (см. ниже). Например идент гейта
     для ресурса "inet" (трафик интернета) представляет собой IP адрес
     клиентского хоста, о чем и отмечено в данном поле. А для IP
     адреса возможно заведение гейта на подсети, вместо единичного
     хоста. Это позволяет создать счет для одной или нескольких
     подсетей.

   Удержание со счета происходит по команде клиентского модуля билинга,
 с указанием количества отгруженного ресурса и др. данных. Оный модуль в
 зависимости от природы ресурса либо вызывается периодически (напр. для
 снятия статистики по трафику) или запускатся более или менее постоянно
 (напр. для подсчета времени доступа с диал-апов (not implemented)).

Базовые понятия: ГЕЙТ
       
   Гейт - запись таблицы (файл reslinks.cfg) связей между ресурсами
 и счетами. Кроме:
     * номера счета
     * идента ресурса
 каждый гейт также имеет идентификацию, уникальную в пределах каждого
 ресурса:
     * id (gate id) - числовой ид для записи в журнал. Соблюдается
       уникальность пары gate_id/res_id.  
     * идент гейта - строка используемая для в противоположных
       lookup-ах:
          * идентификация пользователя, использующего ресурс
            (определение счета)
          * генерация правила для данного пользователя. Идент
            гейта передается в генератор правил
       так для ресурса "inet" идент гейта - ip-адрес хоста или
       подсети (с маской стиля a.a.a.a/32 (хост), a.a.a.0/24
       (подсеть класса C))
       для e-mail же идент (по предварительным прикидкам)
       email-адрес.

   За одним счетом может числиться несколько гейтов в т.ч. на
   один и тот же ресурс (т.к. владелец счета может иметь
   несколько хостов или несколько почтовых ящиков)
 

            Обновление разрешений доступа

   Управление доступом (точнее обновление разрешений на доступ к ресурсам
 в зависимости от состояния счетов) выполняется по команде билинга update
 (которую может подать оператор с консоли или клиентский модуль билинга)
 а также при запуске ядра с ключом -u.

   Выполняется обновление в три этапа, билинг:

   1 Генерация ресурсо-независимых разрешений 
     Проход по аккаунтам и создание файлов 
           allowed.<имя ресурса>
           disallowed.<имя ресурса> 
     Каждый файл представляет собой список гейтовых идентов, для которых
     доступ необходимо соответственно разрешить и запретить.
       Т.е. если доступ по аккаунту запрещен (см. ACCESS выше) то все
     ассоциированные с ним гейты отправляются в файлы allowed.*, иначе -
     в disallowed.*

   2 Генерация ресурсо-зависимых правил для разрешения доступа. 
     Для генерации для каждого ресурса выполняется командная строка,
     определенная в описателе ресурса.
     В качастве входных данных скрипт или программа использует
     содержимое файлов allowed.<имя ресурса> и  disallowed.<имя ресурса>

     NB: для PF в OpenBSD 3.4+ файлы allowed.inet и disallowed.inet
     могут быть использованы для загрузки списка в таблицу (table) адресов
     поэтому для ресурса inet шаг генерации правил можно пропустить (оставив
     файл beepfrules.sh пустым).

   3 Активация правил. Выполняется запуском командной строки, статически 
     прописанной в ядре, по умолчанию это запуск скрипта 
          /usr/local/bin/beeapply.sh
     В этом скрипте прописываются все необходимые для активации правил,
     сгенерированных на предыдущем этапе правил.

			Файлы данных

/var/bee
     Каталог билинга. Создайте руками

/var/bee/accounts.dat
     Tаблица аккаунтов. Создайте пустой файл

/var/bee/beelog.dat
     Журнал операций. создайте пустой файл. При разрастании файла (или переодически)
   можно заменить его пустым файлом. 

/var/bee/beelog.idx
     Посуточный индекс журнала транзакций. Создается утилитой logidx, используется
   утилитой beerep (см.)

/var/bee/reslinks.dat 
     Файл гейтов. Создайте пустой файл.
     Файл текстовый, но изменяется командами ядра, и руками его изменять не
   придется
     Формат строки файла:
    <идент ресурса> <ид гейта> <аккаунт> <идент гейта>
  например строка:
    inet	5	34	192.168.66.76/32
  определяет разрешение доступа к ресурсу inet, для владельца аккаунта 34,
  с адреса 192.168.66.76, с идом гейта 5

/var/bee/allowed.*
/var/bee/disallowed.*
     Временные файлы генерируемые билингом для каждого ресурса.

/etc/pf.conf
     Исходные правила файрвола (файрвол используется для управления
   доступом к ресурсу inet). Исходные правила должны запрещать доступ,
   всем, кроме жизненно важных серверов. В месте куда будут вставлены
   динамические правила должна стоять сигнатура которая указывается
   ключом в генератор правил. 
     Билинг НЕ ИЗМЕНЯЕТ исходных правил. Эффективные правила
   записываются в другой файл (cм. ниже). Смысл этого в том,
   что если билинг не запустится, никто никуда доступа не
   получит. 
     Учитывая то, что во время работы билинга данный файл
   может быть считан в любую минуту, изменения в него нужно вносить
   аккуратно, а для активации правил, вместо обычной конанды fw,
   нужно дать команду update билингу или сказать bee -u в шелле.

/var/bee/pf.conf.effective
     Правила файрвола cо динамической вставкой биллинга.

/var/bee/lockfile
     Файл блокировки (используется билингом для невозможности
   конкурирующих операций обновления разрешений). Его не нужно ни
   создавать ни удалять.

/etc/bee/intra.conf
     Файл конфигурации SNMP-устройств для управления ресурсом
   intra (управление портами свитчей для доступа к интрасети).
