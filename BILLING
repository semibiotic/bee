                БИЛЛИНГ, ОПИСАНИЕ  
              предварительная версия
             (! Это не User Manual !)

 Уровень разработки проекта - "Quick & Dirty"

                      Цели.

   Билинг представляет собой комплекс программ и скриптов для:
   * подсчета расхода произвольных ресурсов
   * удержания соответствующих сумм со счетов пользователей
   * учет расхода ресурва и операций над счетом (в одном журнале) 
   * и управления доступом к этим ресурсам в зависимости от
     состояния счета
   
   Модули

   * Ядро билинга (/usr/local/bin/bee) - клонирующийся tcp-сервер,
     в течении сеанса принимающий команды от клиента (оператора,
     если клиентом является telnet). Ядро билинга также может
     быть запущено в консольном режиме (параллельно с сервером
     или без оного) со вводом-выводом на stdin/stdout, а также
     может быть запушено только для обновления разрешений.
     По командам билинг:

     1. рассчитывает суммы удержаний за расход ресурсов
     2. проводит операции над счетом
     3. протоколирует операции
     4. управляет счетами (в т.ч. добавление счета)  
     5. предоставляет различную информацию (состояние счета,
        lookup-ы ресурсов по счету и наоборот, журнал начислений,
        отчет за период) в виде для человека и для машины.
     6. через скрипты проводит операцию по обновлению разрешений
        на доступ к ресурсам

   * Клиенты билинга - программы инициирующие соединение с
     билингом (могут выполнятся на другом хосту).
       * Счетчики ресурсов или программы снимающие с оных
         статистику. Иницииируют рассчеты по ресурсу.
         Сами счетчики или скрипты-оболочки также должны
         инициировать обновление разрешений, но делать это
         находя грань между realtime-ом и здравым смыслом.
           Способ запуска счетчика зависит от природы
         ресурса (время или объем), запуск из сron(8),
         запуск демоном, гибридные варианты.  
           Реализованный в данный момент счетчик трафика
         /usr/local/bin/beetraff (парсер вывода ipfstat(8))
         запускается cron(8), скажем, каждые пять минут.
       * Генераторы статистики для веб-форм
   * Программы и скрипты вызываемые билингом для :
       * генерации правил для конкретного ресурса
       * активации всевозможных правил (/usr/local/bin/beeapply.sh)   

   Ограничения в данной точке разработки:
   * отсутствие аутентификации и уровней доступа
   * описание ресурса статически прописываются в исходном коде
     ядра билинга
   * тарифы и алгоритмы расчета сумм для каждого ресурса
     статически прописываются в исходном коде ядра билинга
   * критерий валидности счета железно прописан в программе - 
     отсутствие тегов ненормального состояния счета и положительный
     баланс (или нелимит).
   * нет модулей для подсчета почтового трафика
    
Базовые понятия: СЧЕТ

   Счет (в базе счетов account.dat) представлен:
    * номером (индекс в таблице счетов)
    * словом флагов (tag) (в порядке убывания приоритета)
       * DELETED (также EMPTY) - счет был удален
       * BROKEN - поврежденный счет
       * FROZEN - счет заморожен (доступ запрещен администратором)
       * OFF    - cчет выключен (доступ запрещен самим пользователем)
       * UNLIMIT - нелимитированый доступ (доступ разрешен, но списания
         не производятся)
    * балансом (суммой на счету)
   Данные о владельце счета не хранятся в таблице счетов.

Базовые понятия: РЕСУРС

   Ресурс - любое количественное измерение подлежащее тарификации
 (или безденежному учету) через билинг. Ресурс (в статических таблицах
 ядра билинга) представлен:
   * числовым id-ом (индекс таблицы)
   * строкой идентификатора ресурса (напр. inet, mail и т.п.)
   * процедурой, подстчета приращения баланса исходя из предоставленных
     модулем подсчета данных (возможно и из других доступных данных)
   * командной строкой с аргументами запуска скрипта (для создания правил
     разрешения доступа см. Управление доступом)
   * тип строкового идента в таблице ресурсных связей. Смысл типа
     идента - возможность нестрогого соответствия идента иденту
     пользователя. Например для IP-адреса: мы можем считать трафик
     сразу для целой подсети, что мы учтем при сравнении и проверим
     не строгое соответствие, а попадание адреса пользователя в
     подсеть.  

   Удержание со счета происходит по команде клиентского модуля билинга,
 с указанием количества отгруженного ресурса и др. данных. Оный модуль в
 зависимости от природы ресурса либо вызывается переодически (напр. для
 снятия статистики по трафику) или запускатся более или менее постоянно
 (напр. для подсчета времени доступа с диал-апов (not implemented)).

Базовые понятия: ГЕЙТ (старый термин - Ресурсная связь)
             (Billing Gate :)
       
   Гейт - запись таблицы (файл reslinks.cfg) связей между ресурсами
 и номерами счетов. Кроме:
     * номера счета
     * идента ресурса
 каждый гейт также имеет идентификацию, уникальную в пределах каждого
 ресурса:
     * id (user id) - числовой ид для записи в журнал (при развертке
       журнала гейт восстанавливается по паре res_id/user_id) 
     * символьный идент - строка годная как для идентификации клиента
       счетчиком ресурса, так и для генерации правила генератором
       правил того же ресурса. Так для ресурсов базирующихся на
       трафике, это будет ip-адрес с маской в стиле ipf(8),
       для e-mail же идент будет собссно (по предварительным прикидкам)
       email-адрес.
   Таким образом за одним счетом может числится несколько гейтов на один
   и тот же ресурс, но иденты будут различатся (Например я работаю на двух
   хостах сети или зарегистрировал пару mail-аккаунтов) 
  
            Обновление разрешений доступа

   Управление доступом (точнее обновление разрешений в зависимости от
 состояния счетов) выполняется по команде билинга update, которую может
 подать оператор с консоли, клиентский модуль билинга или запуском
 билинга с ключом -u (предусмотрен запуск ТОЛЬКО для обновления
 разрешений).
   Выполняется обновление в три этапа, билинг:
   1 Проход по аккаунтам и создание файлов allowed.*
     (allowed.<имя ресурса>) Каждый файл представляет собой список
     имен/адресов/идентов гейтов для разрешения доступа (под разрешение
     попадают аккаунты с положительным баллансом (или имеющие тег UNLIMITED)
     в валидном состоянии (не DELETED, BROKEN, FROZEN, или OFF)). 
   2 Генерация правил для разрешения доступа. Для оной выполняется скрипт,
     командной строкой, определенной в описателе каждого ресурса.
     В качастве входных данных скрипт имеет содержимое файла allowed.*
   3 Активация правил. Выполняется запуском одного скрипта, командная строка
     которого статически определена в билинге (/usr/local/bin/beeapply.sh).

			Файлы данных

/var/bee
     Каталог билинга. Создайте руками

/var/bee/accounts.dat
     Tаблица аккаунтов. создайте пустой файл

/var/bee/beelog.dat
     Журнал операций. создайте пустой файл. При разрастании файла (или переодически)
   можно заменить его пустым файлом. 

/var/bee/reslinks.cfg 
     Файл ресурсных гейтов (ресурсных связей).
     Формат строки файла:
    <идент ресурса> <ид гейта> <аккаунт> <идент гейта>
  например строка:
    inet	5	34	192.168.666.76/32
  определяет разрешение доступа к ресурсу inet, для владельца аккаунта 34,
  с адреса 192.168.666.76, с идом 5

/var/bee/allowed.*
     Временные файлы генерируемые билингом для каждого ресурса.

/etc/ipf.rules
     Исходные правила. Должны запрещать все ресурсы, которыми рулит
   билинг. Также, файл должен содержать сигнатуру, для генератора
   правил.  
     Биллинг НЕ ИЗМЕНЯЕТ данного файла. Смысл в том, что если биллинг
   не запустится (или демон упадет (что пока не сделано)), никто
   никуда доступа не получит. Вместо этого билинг создает новый
   файл правил, с которым (через скрипт) запускает ipf.
     При внесении изменений в исходные правила, несколько изменяется
   процедура их активации, вместо ipf -Fa /etc/ipf.rules необходимо
   сказать update на консоли биллинга, или bee -u в шелле.    

/var/bee/ipf.rules.effective 
     Правила ipf cо вставками разрешений биллинга 

/var/bee/lockfile
     Файл блокировки (используется биллингом для невозможности
   конкурирующих операций обновления разрешений). Его не нужно ни
   создавать ни удалять.

                 Разработанные бинари и скрипты

/usr/local/bin/bee
     Собственно биллинг. Умеет работать в трех режимах:
   * Сервер - нормальный режим работы билинга. Билинг запускается
      как tcp-сервер (по умолчанию на порте 49160), в ожидании
      соединений. Если сервер запущен не будет, биллинг ессно,
      работать не будет.
   * Консольный режим - однопользовательская консоль билинга,
      работающая с stdin/stdout может быть запущена одновременно
      с биллингом в режиме сервера. С тем же успехом можно зайти
      на билинг telnet-ом. Возможно перенаправлением ввода-вывода.
   * Безоперационный режим - билинг не открывает сеансов, проводя
      лишь действия, определенные управляющими ключами.

        Usage:  bee [options]

 A    - service port           (default - 49160)
 u    - Update access at start
 d    - Run daemon mode 
 c    - Run console mode
 h, ? - Help (not implemented)

/usr/local/bin/beetraff
     Счетчик трафика. Парсер вывода ipfstat -aio.
     Клиент биллинга, вывод ipfstat ожидается на stdin и отдает
   команды на транзакцию по ресурсу. При наличии ключа -u перед
   отсоединением отдает команду на обновление разрешений.
   
/usr/local/bin/beeipf
     Генератор правил ipf.
     Строка для запуска определяется в описателе ресурса,
   связанного с фильтрами ipf. 

      Usage: beeipf [<switches>]
s - filter source file (default - /etc/ipf.rules)
t - filter target file (default - /var/bee/ipf.rules.effecive)
d - destination host   (default - "any")
i - target interface   (default - tun0)
r - resource name      (default - inet)
f - hostlist filename  (default - /var/bee/allowed.inet)
P - destination suffix (default - "")
p - source suffix      (default - "")
m - filter file mark   (default - "#<beerules>")
S - rule suffix        (default - "")

/usr/local/bin/beetraff-ipf.sh
     Скрипт-оболочка счетчика трафика. Именно он вызывается из
   cron(8). Cюда же рекомендуется добавить вызов счетчиков других
   ресурсов, базирующихся на трафике (причем последний с ключом -u).

     Usage: ipfstat -aio | beetraff [<switches>]
 r - resource name          (default - inet)
 a - daemon host address    (compiled-in default)
 A - daemon tcp port number (compiled-in default)
 d - destination address    (default - "any")
 u - pass update command    (default - no)

/usr/local/bin/beeapply.sh
     Cкрипт, для активации правил для всех ресурсов.

/usr/local/bin/getacc
     Программа для PHP-веб формы просмотра пользователем состояния
   своего счета. Параметром ей передается ip адрес клиента,
   Резюме состояния счета выводится на stdout.

Usage: getacc <ip-address>

