$RuOBSD: BILLING,v 1.9 2005/04/05 08:28:59 shadow Exp $
Last Update 5.04.2005

                БИЛЛИНГ, ОПИСАНИЕ  
                  текущая версия
        (Этот документ не является User Manual)

                      Цели.

   Билинг представляет собой комплекс программ и скриптов для:
   * Ведения счетов пользователей
   * подсчета расхода произвольных ресурсов
   * удержания соответствующих сумм со счетов
   * учет расхода ресурсов и операций над счетом (в журнале транзакций) 
   * и управления доступом к этим ресурсам в зависимости от
     состояния счета
   * генерации отчетов по транзакциям
   * поддержки веб-интерфейса для посмотра состояния счета,
     статистики управление счетом
   
   Модули

   >> Ядро билинга (/usr/local/bin/bee) - клонирующийся tcp-сервер,
     в течении сеанса принимающий команды от клиента (оператора,
     если клиентом является telnet). Ядро билинга может быть
     запущено в консольном режиме (параллельно со всеми инстанциями
     сервера, запушенного сервера не требует) со вводом-выводом на
     stdin/stdout. До запуска (сервера, консоли или без входа в них),
     ядро может выполнить обновления разрешений (ключ -u).

     По командам ядро:

     1. рассчитывает суммы удержаний за расход ресурса
     2. проводит операции над счетом
     3. протоколирует транзакции
     4. управляет счетами (в т.ч. добавление/удаление счета)  
     5. предоставляет различную информацию 
          * текущее состояние счета
          * произвольные lookup-ы ресурсов по счету и наоборот
          * журнал транзакций,
          * отчеты за указанный период
        в виде для человека и (точнее говоря и/или) для машины 
        (т.е. программы).
     6. через внешние скрипты проводит обновление разрешений
        на доступ к ресурсам.
     7. существуют также дополнительные кустарные команды,
        которые я делал в своих целях.

   >> Клиенты билинга - программы инициирующие соединение с
     билингом (могут выполнятся на другом хосте).
       * Счетчики ресурсов или программы снимающие с оных
         статистику. Инициируют расчеты по ресурсу.
         Сами счетчики или скрипты-оболочки также должны
         периодически инициировать обновление разрешений,
         но делать это находя грань между realtime-ом и
         здравым смыслом.
           Способ запуска счетчика зависит от природы
         ресурса (время или объем), запуск из cron(8),
         запуск демоном, гибридные варианты.  
           Реализованный в данный момент счетчик трафика
         запускается cron(8), скажем, каждые пять минут.
   >> Утилиты и скрипты вызываемые билингом для :
       * генерации правил для конкретного ресурса
       * активации новых разрешений для всех ресурсов 
         (/usr/local/bin/beeapply.sh)   

   >> Дополнительные утилиты
       * beerep  - генератор отчетов (в HTML-форме) см. (beerep -?)
       * logidx  - генератор индексного файла для лога
       * payman  - полноэкранная консольная утилита для зачисления
         денег оператором
       * getacc  - получить состояние счета по IP-адресу (для простого
         веб-интерфейса)
       * getaсс2 - получить состояние счета по IP-адресу (сложный
         веб-интерфейс)
       * ip2acc  - получить номер счета по IP-адресу (веб-ифейс)
       * acc_on  - включить аккаунт по IP-адресу  (веб-ифейс)
       * acc_off - выключить аккаунт по IP-адресу (веб-ифейс)
       * ipchk   - проверить IP адрес в файле доступа

   Ограничения в данной точке разработки:

   * отсутствие аутентификации и уровней доступа
   * описание ресурса статически прописываются в исходном коде
     ядра билинга
   * тарифы и алгоритмы расчета сумм для каждого ресурса
     статически прописываются в исходном коде ядра билинга
   * критерий активности счета жестко прописан в программе -
        * целостность записи
        * отсутствие инвалидизирующих тегов (DELETED, BROKEN)
        * отсутствие приостанавливающих тегов (FROZEN, OFF)
        * наличие тега UNLIMIT или положительный балланс счета
   * нет (и не будет) модулей для подсчета почтового трафика
    
Базовые понятия: СЧЕТ (или АККАУНТ)

   Счет (в базе счетов account.dat) представлен записью с полями:
    * номером (индекс в таблице счетов)
    * словом флагов (tag) (в порядке убывания приоритета)
       * DELETED (также EMPTY) - счет был удален
       * BROKEN - поврежденный счет
       * FROZEN - счет заморожен (доступ запрещен администратором)
       * OFF    - cчет выключен (доступ приостановлен самим пользователем)
       * UNLIMIT - нелимитированый доступ (доступ разрешен, но списания
         не производятся)
       * PAYMAN - разрешить управление счетом через утилиту payman
         (utils/payman) 
    * балансом (суммой на счету)
    * начало периода действия (дата)
    * конец периода действия (дата, не включая !)
   Данные о владельце счета не хранятся в таблице счетов.

     Балланс и период действия - исключающие друг друга режимы
   определения активности счета.
     Режим периода активен если выставлено либо начало, либо
   конец периода. Если же и начало и конец периода в NULL
   - работает балланс.
     При теге UNLIMIT аккаунт активен всегда.

   ACTIVE =
                       (unlimit)
                           ||
   (start == NULL && stop == NULL) && (ballance >= 0.01)
                           ||
   (start != NULL || stop != NULL) && (date > start) && (date < stop || stop == NULL)

     Теги DELETED и BROKEN указывают на недостоверность
   аккаунтной записи в таблице и запрещают любые действия над
   аккаунтом (кроме его восстановления). У тега DELETED 
   приоритет выше.

   RELIABLE = (! broken) && (! deleted)

     Доступ запрещается при наличии тегов FROZEN или OFF. А
   также при недостоверности или неактивности аккаунта.

   ACCESS =
     RELIABLE && (! frozen) && (! off) && ACTIVE 
          
     Транзакции запрещаются (но пишутся в журнал с кодом ошибки)
   при тегах UNLIMIT и FROZEN. Как и другие операции, транзакции
   запрещены при недостоверности аккаунта

   TRANS_ENABLE = 
     RELIABLE && (! unlimit) && (! frozen)

Базовые понятия: РЕСУРС

   Ресурс - любая услуга подлежащая тарификации (или безденежному
   учету) и/или управлению через билинг. Ресурс (в статических
   таблицах ядра билинга) представлен:
   * числовым id-ом ресурса (индекс таблицы)
   * строкой-идентом ресурса (напр. "inet", "mail" и т.п.)
   * процедурой, подстчета приращения баланса исходя из предоставленных
     модулем подсчета данных (возможно и из других доступных данных)
   * командной строкой для вызова генератора правил (непосредственно или через скрипт)
     (см. Управление доступом)
   * тип строкового идента гейта (см. ниже). Например идент гейта
     для ресурса "inet" (трафик интернета) представляет собой IP адрес
     клиентского хоста, о чем и отмечено в данном поле. А для IP
     адреса возможно заведение гейта на подсети, вместо единичного
     хоста. Это позволяет создать счет для одной или нескольких
     подсетей.

   Удержание со счета происходит по команде клиентского модуля билинга,
 с указанием количества отгруженного ресурса и др. данных. Оный модуль в
 зависимости от природы ресурса либо вызывается периодически (напр. для
 снятия статистики по трафику) или запускатся более или менее постоянно
 (напр. для подсчета времени доступа с диал-апов (not implemented)).

Базовые понятия: ГЕЙТ (старый термин - Ресурсная связь)
             (Billing Gate :)
       
   Гейт - запись таблицы (файл reslinks.cfg) связей между ресурсами
 и счетами. Кроме:
     * номера счета
     * идента ресурса
 каждый гейт также имеет идентификацию, уникальную в пределах каждого
 ресурса:
     * id (gate id) - числовой ид для записи в журнал. Соблюдается
       уникальность пары gate_id/res_id.  
     * идент гейта - строка используемая для в противоположных
       lookup-ах:
          * идентификация пользователя, использующего ресурс
            (определение счета)
          * генерация правила для данного пользователя. Идент
            гейта передается в генератор правил
       так для ресурса "inet" идент гейта - ip-адрес хоста или
       подсети (с маской стиля a.a.a.a/32 (хост), a.a.a.0/24
       (подсеть класса C))
       для e-mail же идент (по предварительным прикидкам)
       email-адрес.

   За одним счетом может числиться несколько гейтов в т.ч. на
   один и тот же ресурс (т.к. владелец счета может иметь
   несколько хостов или несколько почтовых ящиков)
 

            Обновление разрешений доступа

   Управление доступом (точнее обновление разрешений на доступ к ресурсам
 в зависимости от состояния счетов) выполняется по команде билинга update
 (которую может подать оператор с консоли или клиентский модуль билинга)
 а также при запуске ядра с ключом -u.

   Выполняется обновление в три этапа, билинг:

   1 Генерация ресурсо-независимых разрешений 
     Проход по аккаунтам и создание файлов 
           allowed.<имя ресурса>
           disallowed.<имя ресурса> 
     Каждый файл представляет собой список гейтовых идентов, для которых
     доступ необходимо соответственно разрешить и запретить.
       Т.е. если доступ по аккаунту запрещен (см. ACCESS выше) то все
     ассоциированные с ним гейты отправляются в файлы allowed.*, иначе -
     в disallowed.*

   2 Генерация ресурсо-зависимых правил для разрешения доступа. 
     Для генерации для каждого ресурса выполняется командная строка,
     определенная в описателе ресурса.
     В качастве входных данных скрипт или программа использует
     содержимое файлов allowed.<имя ресурса> и 
     disallowed.<имя ресурса>

   3 Активация правил. Выполняется запуском командной строки, статически 
     прописанной в ядре, по умолчанию это запуск скрипта 
          /usr/local/bin/beeapply.sh
     В этом скрипте прописываются все необъходимые для активации правил,
     сгенерированных на предыдущем этапе правил.

			Файлы данных

/var/bee
     Каталог билинга. Создайте руками

/var/bee/accounts.dat
     Tаблица аккаунтов. Создайте пустой файл

/var/bee/beelog.dat
     Журнал операций. создайте пустой файл. При разрастании файла (или переодически)
   можно заменить его пустым файлом. 

/var/bee/beelog.idx
     Посуточный индекс журнала транзакций. Создается утилитой logidx, используется
   утилитой beerep (см.)

/var/bee/reslinks.dat 
     Файл гейтов. Создайте пустой файл.
     Файл текстовый, но изменяется командами ядра, и руками его изменять не придется
     Формат строки файла:
    <идент ресурса> <ид гейта> <аккаунт> <идент гейта>
  например строка:
    inet	5	34	192.168.66.76/32
  определяет разрешение доступа к ресурсу inet, для владельца аккаунта 34,
  с адреса 192.168.66.76, с идом гейта 5

/var/bee/allowed.*
/var/bee/disallowed.*
     Временные файлы генерируемые билингом для каждого ресурса.

/etc/ipf.rules (OpenBSD 2.9 и ниже)
     или
/etc/pf.conf
     Исходные правила файрвола (файрвол используется для управления
   доступом к ресурсу inet). Исходные правила должны запрещать доступ,
   всем, кроме жизненно важных серверов. В месте куда будут вставлены
   динамические правила должна стоять сигнатура которая указывается
   ключом в генератор правил. 
     Билинг НЕ ИЗМЕНЯЕТ исходных правил. Эффективные правила
   записываются в другой файл (cм. ниже). Смысл этого в том,
   что если билинг не запустится, никто никуда доступа не
   получит. 
     Учитывая то, что во время работы билинга данный файл
   может быть считан в любую минуту, изменения в него нужно вносить
   аккуратно, а для активации правил, вместо обычной конанды fw,
   нужно дать команду update билингу или сказать bee -u в шелле.

/var/bee/ipf.rules.effective (OpenBSD 2.9 и ниже)
         или
/var/bee/pf.conf.effective
     Правила файрвола cо динамической вставкой биллинга.

/var/bee/lockfile
     Файл блокировки (используется билингом для невозможности
   конкурирующих операций обновления разрешений). Его не нужно ни
   создавать ни удалять.

/etc/bee/intra.conf
     Файл конфигурации SNMP-устройств для управления ресурсом
   intra (управление портами свитчей для доступа к интрасети).
