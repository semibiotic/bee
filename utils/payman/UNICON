                          Суббиблиотека Unicon

  Unicon - суббиблиотека низкоуровнего ввода/вывода а экран, созданная для
переносимости программы. Программа может использовать для ввода/вывода только
функции этой суббиблиотеки (исключения возможны, но они должны быть прописаны
для обоих платформ через условную трансляцию).
  Это ограничение, не распространяется на код функций Unicon, пока они
реализованы в рамках прототипов.
  Задумывалось, что исходники программы должны компилироваться на различных
платформах, (или с одной-двумя заменами #define), насколько это достижимо и
целесообразно, покажет, как говорится, вскрытие. 

  Может показаться, что библиотека стилизована к DOS-овской conio.h, это не
далеко от истины.

                               Функции

  Возвращаемые значения функций (за исключением ProbeUnicon()) пока не
определены.

int  ProbeUnicon()  - Вернуть ненуль если библиотека может работать, в противном
                    случае, вернуть нуль. Должна быть вызвана первой.
int  CreateUnicon() - Инициализировать библиотеку (должна быть успешной, если
                    ProbeUnicon() вернула ненулевой вердикт). Должна быть
		    вызвана только после ненулевого вердикта ProbeUnicon(),
		    но перед вызовом любой из функций.
void KillUnicon()   - Деинициализировать библиотеку (должна быть вызвана перед
                    выходом из программы).
int  Color()        - э ... часть инициализации - инициализация цветного режима
                    если это возможно. надо будет инкапсулировать ее в
		    CreateUnicon(). Должна быть вызвана после CreateUnicon(),
		    вне зависимости от того, цветной режим или монохромный :)
void GetSizes()     - Перечитать размеры терминала и настроить глобальные 
                    переменные ScreenLines и ScreenColumns.
void Gotoxy(int lin, int col)
                    - Установить текущие координаты для печати
int  Cursor(int f); - Спрятать курсор (f=0) или показать в текущих координатах.
int  Putch(char	c); - Вывести знак
int  Puts(char * str); - вывести строку
int  Kbhit();       - (не задействовано) проверить состояние буфера клавиатуры
                    и вернуть 0 если он пуст.
unsigned long GetKey(); - Вернуть двойное слово, идентифицирующее нажатую
                    клавишу или произошедшее событие (терминал, мышь и пр.), и
		    возможно, состояние флагов клавиатуры (нажатые регистровые
		    клавиши, состояние замков клавиатуры (Num/Caps/Scroll/Ins)).
		      Единственное требование совместимости - младший байт
		    возвращаемого значения, для символьных клавиш должен
		    возвращать ее печатный код. Коды функциональных клавиш могут
		    быть различными (т.к. для разных платформ определяются разные
		    константы К_клавиша (keys.h)).
		      Вместе с константами клавиш должна быть определена маска
		    M_KEY (AND-маска), которая выделяет код клавиши (от флагов)
         	      Желательно, также, чтобы одно нажатие генерировало только
		    одно возвращаемое значение.
int Ink(int c)     - установить текущий цвет для символа (0-15).
int Paper(int c)   - установить текущий цвет для фона (0-7).
int Attr(int ink, int paper) - Установить цвета символа и фона.
uchar bAttr(char byte) - Установить цвета символа и фона из байта 0pppiiii 

                            Данные Unicon

int ScreenLines   - количество строк на экране
int ScreenColumns - количество колонок на экране