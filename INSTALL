$RuOBSD: INSTALL,v 1.5 2002/11/01 07:20:24 tm Exp $
Last Update 10.09.2001


                        СБОРКА ОСНОВНЫХ МОДУЛЕЙ

   Заберите и распакуйте исходный код.

   Соберите библиотеки и основные модули. Для этого в каталоге bee скажите:

       make libs clean all install

                       ПОДГОТОВКА И ЗАПУСК ЯДРА

   Создайте необходимые файлы:

       mkdir /var/bee
       cd /var/bee
       touch accounts.dat
       touch beelog.dat
       touch reslinks.dat
   
   Перейдите в каталог modules/scripts

   Проверьте правильность исполнительных скриптов (если вы не определились
   что они должны содержать - убедитесь что все строки закомментированы):
       beeapply.sh
       beepfrules.sh
       newlogin.sh
   
   установите скрипты командой
       make install   


   Попробуйте запустить ядро в консольном варианте (bee -c). Выход - 
   команда exit.

   добавьте в /etc/rc.local запуск ядра демоном (с изначальной установкой
   разрешений):

       /usr/local/bin/bee -u -d


   ОБЯЗАТЕЛЬНО ЗАПРЕТИТЕ ДОСТУП К ПОРТУ 49160 со всех хостов кроме нужных
   т.к. в текущей версии нет аутентификации и ограничения доступа.


   Запустите демон (той же командой) или перезагрузите компьютер.

                     БPИФИНГ: РАБОТА СО СЧЕТАМИ

   Команды управления счетом
    >> просмотр счета(-ов) - acc
    >> добавить счет       - new
    >> удалить счет        - delete
    >> управление тегами   - freeze,unfreeze,on,off,unlimit,limit
    >> управление датами   - setstart,setstop
    >> начисление денег    - add
    >> коррекция счета     - _fix

   Комманды управления гейтами счета
    >> просмотр гейтов     - look
    >> добавление гейта    - addgate (или gate)
    >> удаление гейта      - delgate

                          РЕСУРС ADDER

   Все начисления на счет (командой add) начисляются от ресурса adder и
заносятся в лог транзакций. Поэтому каждый счет должен иметь гейт к ресурсу
adder. В качастве идента гейта рекомендуется использовать ник/логин персоны
(для упрощения поиска аккаунта).

                      НАСТРОЙКА РЕСУРСА INET

 (предполагается версия OpenBSD 3.0 и выше, т.е. с файрволом PF)

   Ресурс inet это трафик в/из Интернета.

   1. Установка ipstatd (демон статистики)

   Клиент билинга, выступающий счетчиком для ресурса inet, использует 
   демон статистики ipstatd и входящий в его состав дампер статистики dumpstat.

   ipstatd считает статистику на pflog0 (т.е. все что проходит через
   разрещающие правила со словечком log). 

   Распакуйте исходный код ipstatd, соберите и установите его:

      make all install

   Добавьте запуск ipstatd в /etc/rc.local

   2. Настройка файрвола, определение интерфейса

   Необходимо определиться с сетевым интерфейсом, на котором билинг будет
   управлять доступом и считать трафик. Так на шлюзе можно считать трафик как
   на "внешнем" интерфейсе, так и на "внутреннем" от этого зависит вид
   разрещающего правила и параметры генератора.
   У меня трафик считается на внутреннем интерфейсе шлюза, для внешнего
   интерфейса _возможно_неправильное_определение_направления_трафика_
   входящий/исходящий (счетчиком билинга).

   Правила файрвола должны быть переписаны таким образом, чтобы запрещать
   весь трафик (кроме жизненно важного) через выбранный интерфейс. 
   Должно быть определено место для динамических правил (маркером для
   генератора правил). После динамических правил можно добавить необходимые
   корректирующие правила.

   Жизненно важные правила, указанные выше - правила пропускающие сервера,
   даже если демон билинга по какой-то причине не запустился. Если вы хотите
   считать по ним трафик - укажите в них словечко "log" и припишите гейт
   для него на отдельный аккаунт. 
   Важный момент - такой аккаунт необходимо заморозить или выключить (что
   больше подходит) во избежание генерации повторных разрешающих правил для
   серверов.

   3. Настройка счетов (или добавление гейтов)

   Для каждого хоста или подсети (если она тарифицируется на одном счете)
   к счету должен быть определен гейт. В качестве идента гейта необходимо указать
   IP-адрес с маской подсети. Например 192.168.12.2/32 (хост) или 192.168.14/24
   (подсеть класса C). Нельзя делать гейтов с одинаковыми адресами (во избежание
   генерации дублированных правил.

   Допустим что сеть у вас такая:

   счет	    e-mail			 хост
   0        boss@pupkin.com	192.168.1.100
   1	    peter@pupkin.com	192.168.1.106
   2	    mary@pupkin.com	192.168.1.107
				192.168.1.108 (у Mary два компьютера)
   3        barbie@pupkin.com	192.168.1.30
   4	    ken@pupkin.com	192.168.1.31

   Сеанс регистрации (предполагается что счетов еще не заведено)

	# bee -c
	100 Billing version 0.0.1.0
	100 loading resource links ...
	000 Ready
        human
        000 Mode set
	new
 **** добавляем счета и гейты для ресурса adder ****
	000 account 0 added
        gate adder 0 boss
        000 Success
	new
	000 account 1 added
        gate adder 1 peter
        000 Success
	new
	000 account 2 added
        gate adder 2 mary
        000 Success
	new
	000 account 3 added
        gate adder 3 barbie
        000 Success
	new
	000 account 4 added
        gate adder 4 ken
        000 Success
 **** проверяем (пока счетов мало можно просматривать все счета) ****
 **** в обратном же случае каждый счет смотрится отдельно        ****
        acc
        100 #0000  ----- (VALID)        +0.00  start -          stop -
        100 #0001  ----- (VALID)        +0.00  start -          stop -
        100 #0002  ----- (VALID)        +0.00  start -          stop -
        100 #0003  ----- (VALID)        +0.00  start -          stop -
        100 #0004  ----- (VALID)        +0.00  start -          stop -
        look *
        099 0   adder   boss
        099 1   adder   peter
        099 2   adder   mary
        099 3   adder   barbie
        099 4   adder   ken
        000 Success
 ****         добавляем гейты для ресурса inet          ****
 ****      предполается что мы помним номера счетов     ****
 ****  если это не так, вместо номера счета можно       ****
 ****  применять look-up форму аргумента                ****
 ****  т.е. gate inet adder name boss 192.168.1.100/32  ****
 ****  или  gate inet name boss 192.168.1.100/32        **** 
        gate inet 0 192.168.1.100/32
        000 Success
        gate inet 1 192.168.1.106/32
        000 Success
        gate inet 2 192.168.1.107/32
        000 Success
        gate inet 2 192.168.1.108/32
        000 Success
        gate inet 3 192.168.1.30/32
        000 Success
        gate inet 4 192.168.1.31/32
        000 Success
 **** проверяем (см. оговорку выше) ****
        look *
        099 0   adder   boss
        099 0   inet    192.168.1.100/32
        099 1   adder   peter
        099 1   inet    192.168.1.106/32
        099 2   adder   mary
        099 2   inet    192.168.1.107/32
        099 2   inet    192.168.1.108/32
        099 3   adder   barbie
        099 3   inet    192.168.1.30/32
        099 4   adder   ken
        099 4   inet    192.168.1.31/32
        000 Success
	exit
	100 Have a nice day
	#

   4. Настройка скрипта счетчика

   Скрипт должен содержать запуск счетчика с перенаправлением на
   stdin вывода dumpstat stat. Пример

      # cat `which beetraff-ipstatd.sh`
      #!/bin/sh
      # $RuOBSD: INSTALL,v 1.5 2002/11/01 07:20:24 tm Exp $

      /usr/local/bin/dumpstat stat | /usr/local/bin/beecisco -u
      #

   Если необходимо, можно указать нужные ключи.

   Запуск скрипта необходимо прописать в crontab (запуск с некоторым
   периодом, например в пять минут)

   5. Настройка скрипта генератора правил

   Скрипт должен содержать вызов генератора правил с требуемыми ключами
   если дефолты генератора вам не подходят. 
   По умолчанию, beeipf генерирует разрешения следующего вида:

   Исходяший трафик:  pass out on tun0 from <идент> to any
   Входящий трафик:   pass in on tun0 from any to <идент>

   На самом деле дефолт не подходит для PF, и как минимум необходимы
   следующие ключи

      -l log                         (вставлять после in/out словечко log)
      -s /etc/pf.conf                (исходный файл)
      -t /var/bee/pf.conf.effective  (генерируемый файл)

    Рабочий пример:

      # cat `which beepfrules.sh`
      #!/bin/sh

      /usr/local/bin/beeipf -s /etc/pf.conf -t /var/bee/pf.conf.effective -l log -R -i rl0

      #

   генерирует правила вида
      pass in log on rl0 from <идент> to any  (исходящий трафик)
      pass out log on rl0 from any to <идент> (входящий трафик) 

      -R        (обменять in и out для внутреннего iface)
      -i rl0    (имя iface)

   Скрипт запускается ядром при генерации правил.

   6. Настройка скрипта активации правил

   Скрипт должен содержать вызов pfctl для активации правил
   например:

       # cat `which beeapply.sh`
       #!/bin/sh
       # $RuOBSD: INSTALL,v 1.5 2002/11/01 07:20:24 tm Exp $

       # PF rules set-up (local)
       pfctl -R /var/bee/pf.conf.effective

       #
        
   Скрипт запускается ядром при активации правил.


                          ФАЙРВОЛ НА УДАЛЕННОЙ МАШИНЕ

beetraff-ipstatd.sh

/usr/local/bin/dumpstat -h <хост> stat | /usr/local/bin/beecisco -u 

beepfrules.sh

сat /var/bee/allowed.inet | ssh root@<хост> \
"/usr/local/bin/beeipf -s /etc/pf.conf                \
-t /var/bee/pf.conf.effective -f - -l log -R -i rl0"

beeapply.sh

/usr/bin/ssh root@<хост> "pfctl -R /var/bee/pf.conf.effective" > /dev/null

  Также, необходимо настроить беспарольную (шифровальным ключом)
аутентификацию для ssh на удаленной машине.

                            IPF (OpenBSD 2.9 и ниже)

   1. Счетчик

    Для ipf, счетчик использует вывод программы ipfstat.
   ipfstat выводит счетчики по правилам count в правилах
   файрвола.

    Для этого все хосты должны быть прописаны count правилами

    * Если вы хотите иметь статистику для конкретных сервисов
       (www, ftp) добавьте правила для их подсчета, например

	count out on tun0 proto tcp from 192.168.1.31/32 to any port = 80
	count out on tun0 from 192.168.1.31/32 to any port = 20
	count out on tun0 from 192.168.1.31/32 to any port = 21
	count out on tun0 from 192.168.1.31/32 to any
	count in on tun0 proto tcp from any port = 80 to 192.168.1.31/32
	count in on tun0 from any port = 20 to 192.168.1.31/32
	count in on tun0 from any port = 21 to 192.168.1.31/32
	count in on tun0 from any to 192.168.1.31/32

         Порт можно указывать только в виде port = n. Это не сколько
       ограничение парсера, сколько ограничение журнала.
         Обратите внимание, что правила без конкретного порта должны
       указыватся СТРОГО после и обязательно должны присутствовать
       (это ограничения парсера).

     скрипт   /usr/local/src/beetraff-ipf.sh

     # cat `which beetraff-ipf.sh`
     #!/bin/sh

     # $RuOBSD: INSTALL,v 1.5 2002/11/01 07:20:24 tm Exp $

     ipfstat -aio | /usr/local/bin/beetraff -u
     #

   2. Генератор правил

      дефолты генератора рассчитаны на ipf, поэтому обязательных
      ключей нет.      
     
     вызов генератора проще всего поместить в скрипт beepfrules.sh 

   3. Активация правил

     В скрипт beeapply.sh нужно прописать

         ipf -Fa -f /var/bee/ipf.rules.effective
      
              КОРРЕКЦИЯ ПРОЦЕДУРЫ ВЫЧИСЛЕНИЯ СУММЫ INET

   В файле src/bee/core/res.c найдите и исправьте соответственно
  вашим требованиям процедуру inet_count_proc() по умолчанию
  она возвращает -5 руб/Мбайт без разницы от времени суток etc.

   функция выглядит так

money_t inet_count_proc(is_data_t * data)
{
#define INET_1M_PRICE 5
    return -((money_t)data->value * INET_1M_PRICE /(1024*1024));
}

  можно поменять 5 (рублей за мегабайт) на другую цифру
  или полностью поменять алгоритм вычисления суммы.

  не забудьте пересобрать программу

